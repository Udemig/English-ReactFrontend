/* 
The position Property
The position property specifies the type of positioning method used for an element.

There are five different position values:

static
relative
fixed
absolute
sticky
 */
/* div.static {
  position: static;
  border: 3px solid #73ad21;
}
div.relative {
  position: relative;
  left: 30px;
  border: 3px solid #2126ad;
}
div.fixed {
  position: fixed;
  bottom: 0;
  right: 0;
  width: 300px;
  border: 3px solid #73ad21;
}
div.relative2 {
  position: relative;
  width: 400px;
  height: 200px;
  border: 3px solid #73ad21;
}

div.absolute {
  position: absolute;
  top: 80px;
  right: 0;
  width: 200px;
  height: 100px;
  border: 3px solid #ad2d21;
}
div.sticky {
  position: -webkit-sticky; 
  position: sticky;
  top: 0;
  background-color: green;
  border: 2px solid #4caf50;
} */
 /* positioning */
/* .container {
  position: relative;
}

.topleft {
  position: absolute;
  top: 8px;
  left: 16px;
  font-size: 18px;
}
.topright {
  position: absolute;
  top: 8px;
  right: 16px;
  font-size: 18px;
}
.bottomLeft{
  position: absolute;
  bottom: 40px;
  left: 16px;
  font-size: 18px;
}
.bottomRight{
  position: absolute;
  bottom: 40px;
  right: 16px;
  font-size: 18px;
}
.center {
  position:absolute;
  font-size: 18px;
  top: 50%;
  right: 50%;

}

img {
  width: 100%;
  height: auto;
  opacity: 0.3;
} */
/* 
  The z-index Property
When elements are positioned, they can overlap other elements.

The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others).

An element can have a positive or negative stack order: */
/* img.z-index {
  position: absolute;
  left: 0px;
  top: 0px;
  z-index: -1;
} 
img.z-index {
  position: absolute;
  left: 0px;
  top: 0px;
  z-index: 999999;
} */
/* 
  CSS Overflow
The overflow property specifies whether to clip the content or to add scrollbars when the content of an element is too big to fit in the specified area.

The overflow property has the following values:

visible - Default. The overflow is not clipped. The content renders outside the element's box
hidden - The overflow is clipped, and the rest of the content will be invisible
scroll - The overflow is clipped, and a scrollbar is added to see the rest of the content
auto - Similar to scroll, but it adds scrollbars only when necessary */
 /* #overflowTest {
  background: #4caf50;
  color: white;
  padding: 15px;
  width: 50%;
  height: 100px;
  overflow: auto;
  border: 1px solid #ccc;
}  */
/* The float Property
The float property is used for positioning and formatting content e.g. let an image float left to the text in a container.

The float property can have one of the following values:

left - The element floats to the left of its container
right - The element floats to the right of its container
none - The element does not float (will be displayed just where it occurs in the text). This is default
inherit - The element inherits the float value of its parent
In its simplest use, the float property can be used to wrap text around images.

 */
 /* img.float {
  float: left;
}  */
/* The display: inline-block Value
Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element.

Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not.

Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements.

The following example shows the different behavior of display: inline, display: inline-block and display: block: 
 */
 /* span.a {
  display: inline; 
  width: 100px;
  height: 100px;
  padding: 5px;
  border: 1px solid blue;
  background-color: yellow;
}

span.b {
  display: inline-block;
  width: 100px;
  height: 100px;
  padding: 5px;
  border: 1px solid blue;
  background-color: yellow;
}

span.c {
  display: block;
  width: 100px;
  height: 100px;
  padding: 5px;
  border: 1px solid blue;
  background-color: yellow;
}  */
/* What are Pseudo-classes?
A pseudo-class is used to define a special state of an element.

For example, it can be used to:

Style an element when a user mouses over it
Style visited and unvisited links differently
Style an element when it gets focus */
/* button {
  width: 100px;
  height: auto;
  padding: 10px;
  border: none;
  background-color: green;
  color: white;
  font-size: 18px;
  margin: 5px;
}
 button:hover {
 opacity: 0.5;
 scale: 0.9;
}
a:visited {
  color: green;
} */

/* What are Pseudo-Elements?
A CSS pseudo-element is used to style specified parts of an element.

For example, it can be used to:

Style the first letter, or line, of an element
Insert content before, or after, the content of an element
 */
/*The opacity property specifies the opacity/transparency of an element. */
/* img {
  opacity: 0.5;
} */
/*  text in transparent box*/
 /* div.background {
  border: 2px solid black;
}
div.background img {
  object-fit:fill;
}
div.transbox {
  margin: 30px;
  background-color: #ffffff;
  border: 1px solid black;
  opacity: 0.5;
}

div.transbox p {
  margin: 5%;
  font-weight: bold;
  color: #000000;

}  */
/* Navigation Bars
Having easy-to-use navigation is important for any web site.

With CSS you can transform boring HTML menus into good-looking navigation bars.

 */
 /* ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: flex-start;
  margin:20px;
  gap: 10px;
}  */
/* 
  ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  width: 60px;
}

li a {
  display: block;
}
 */
/* image gallery */
/* div.gallery {
  margin: 15px;
  border: 1px solid #ccc;
  float: right;
  width: 180px;
}

div.gallery:hover {
  border: 5px solid #777;
}

div.gallery img {
  width: 100%;
  height:300px;
  object-fit: cover;
}

div.desc {
  padding: 15px;
  text-align: center;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  font-size: 15px;
}  */
/* forms */
 input[type=text], select {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: inline-block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
  }
  
  input[type=submit] {
    width: 100%;
    background-color: #4CAF50;
    color: white;
    padding: 14px 20px;
    margin: 8px 0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  input[type=submit]:hover {
    background-color: #45a049;
  }
  
  div {
    border-radius: 5px;
    background-color: #f2f2f2;
    padding: 20px; 
  }
/* important */
 /* #myid {
    background-color: blue;
  }
  
  .myclass {
    background-color: gray;
  }
  
  p {
    background-color: red !important;
  } */
  /* media queries */
  /* @media only screen and (min-width: 768px) {
    body {
      background-color: lightblue;
    }
  }  
  @media only screen and (max-width: 600px) {
    body {
      background-color: red;
    }
  } 
   @media only screen and (min-width: 1068px) {
    body {
      background-color: blue;
    }
  }  */
  /*box sizing */
  /* .div1 {
    width: 300px;
    height: 100px;
    border: 1px solid blue;
    box-sizing: border-box;
  }
  
  .div2 {
    width: 300px;
    height: 100px;  
    padding: 50px;
    border: 1px solid red;
    box-sizing: border-box;
  }  */